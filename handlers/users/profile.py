
import requests as requests
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import Command

from constants import host

import constants

from data import config
from states import Meeting_states
from text_constants import change_profile, change_meeting_status
from keyboards.inline.callback_data import change_meeting_status_callback, edite_profile_callback
from keyboards.inline.inline_buttons import one_button, change_profile_or_status_button
from loader import dp
from request_to_server.requests import login


@dp.message_handler(Command("profile"))
async def profile(message: types.Message, state: FSMContext):
    # –ø–æ–¥–±–∏—Ä–∞–µ–º user_id
    user_id = message.from_user.id

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º username –±–æ—Ç–∞
    url = "https://api.telegram.org/bot" + f'{config.BOT_TOKEN}' + "/getMe"
    payload = {}
    headers = {}
    bot_username = "@" + requests.request("POST", url, headers=headers, data=payload).json().get("result").get(
        "username")

    request_from_login = login(user_id, constants.a)
    # –ï—Å–ª–∏ login –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å –Ω–µ 200(–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ), –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è.
    # status = 200 - –í—Å–µ —Ö–æ—Ä–æ—à–æ profile –µ—Å—Ç—å
    if request_from_login.status_code == 200:

        url = host + f'''/filling_profile/'''
        text = f'''–ü—Ä–∏–≤–µ—Ç üëã {message.from_user.full_name}! –ù–∞ —Å–≤—è–∑–∏ {bot_username}. –¢—ã –∑–¥–µ—Å—å –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –Ω–µ —Ç–∞–∫ –ª–∏?\n–Ø –æ —Ç–µ–±–µ –∫–æ–µ-—á—Ç–æ –ø–æ–º–Ω—é: '''
        text += f'''\nEmailüìß: {request_from_login.json().get("email")}'''
        text += f'''\n–°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {request_from_login.json().get("meeting_status")}'''

        if request_from_login.json().get("companion") is not None:
            text += f'''\n–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Å—Ç—Ä–µ—á–∞. –¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫: @{request_from_login.json().get("companion")}'''

        print(f'''***********skills:{request_from_login.json().get("skills")}''')
        if request_from_login.json().get("skills") is not None:
            text += f'''\n–¢–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: {request_from_login.json().get("skills")}'''
        text += "\n–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –∏–∑–º–µ–Ω–∏—Ç—å?"

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "meetting", —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å".
        if request_from_login.json().get("meeting_status") == "meetting":

            await message.answer(text, reply_markup=one_button(text_btn=change_profile,
                                callback_data=edite_profile_callback.new(status="edite_profile"),
                                url=requests.post(url, params={'token': request_from_login.json().get("token"),'contacts': user_id}).url))
        else:
            await message.answer(text, reply_markup=change_profile_or_status_button(change_profile,
                  requests.post(url, params={'token': request_from_login.json().get("token"),
                                             'contacts': user_id}).url, change_meeting_status))

    # profile –Ω–µ –Ω–∞–π–¥–µ–Ω
    else:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç üëã {message.from_user.full_name}! –ù–∞ —Å–≤—è–∑–∏ {bot_username}, —è —Å–º–æ—Ç—Ä—é —Ç—ã –∑–¥–µ—Å—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑. –ù–∞–º "
            f"–Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏  —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éÔ∏è", reply_markup=one_button(text_btn="—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",callback_data=change_meeting_status_callback.new(status="reg"), url=None))


