
import requests as requests
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import  Command

from constants import host

import constants

from data import config
from keyboards.inline.inline_buttons import regestration_button, change_profile_or_status_button
from loader import dp
from request_to_server.requests import login


@dp.message_handler(Command("profile"))
async def bot_start(message: types.Message, state: FSMContext):
    # –ø–æ–¥–±–∏—Ä–∞–µ–º user_id
    user_id = message.from_user.id

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º username –±–æ—Ç–∞
    url = "https://api.telegram.org/bot" + f'{config.BOT_TOKEN}' + "/getMe"
    payload = {}
    headers = {}
    bot_username = "@" + requests.request("POST", url, headers=headers, data=payload).json().get("result").get(
        "username")

    # –ï—Å–ª–∏ login –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å –Ω–µ 200(–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ), –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è.
    # status = 200 - –í—Å–µ —Ö–æ—Ä–æ—à–æ profile –µ—Å—Ç—å
    if login(user_id, constants.a).status_code == 200:

        url = host + f'''/filling_profile/'''
        text = f'''–ü—Ä–∏–≤–µ—Ç üëã {message.from_user.full_name}! –ù–∞ —Å–≤—è–∑–∏ {bot_username}. –Ø —Å–º–æ—Ç—Ä—é —Ç—ã —Ç—É—Ç —É–∂–µ –Ω–µ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑. –Ø –æ —Ç–µ–±–µ –∫–æ–µ-—á—Ç–æ –∑–Ω–∞—é: '''
        text += f'''\nEmailüìß: {login(user_id, constants.a).json().get("email")}'''
        text += f'''\n–°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {login(user_id, constants.a).json().get("meeting_status")}'''

        if login(user_id, constants.a).json().get("companion") is not None:
            text += f'''\n–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Å—Ç—Ä–µ—á–∞. –¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫: @{login(user_id, constants.a).json().get("companion")}'''

        print(f'''***********skills:{login(user_id, constants.a).json().get("skills")}''')
        if login(user_id, constants.a).json().get("skills") is not None:
            text += f'''\n–¢–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: {login(user_id, constants.a).json().get("skills")}'''
        text += "\n–ß—Ç–æ –∂–µ–ª–∞–µ—à—å?"

        await message.answer(text, reply_markup=change_profile_or_status_button("–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                                                                                requests.post(url,
                                                                                    params={'token': login(user_id,
                                                                                                           constants.a).json().get(
                                                                                        "token"),
                                                                                            'contacts': user_id}).url,
                                                                                "–∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞ –≤—Å—Ç—Ä–µ—á–∏")
                             )

    # profile –Ω–µ –Ω–∞–π–¥–µ–Ω
    else:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç üëã {message.from_user.full_name}! –ù–∞ —Å–≤—è–∑–∏ {bot_username}, —è —Å–º–æ—Ç—Ä—é —Ç—ã –∑–¥–µ—Å—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑. –ù–∞–º "
            f"–Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏  —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éÔ∏è", reply_markup=regestration_button)