import sqlite3

import requests as requests
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from keyboards.inline.callback_data import edite_profile_callback
from loader import skills_categories_db, pg_db

from keyboards.inline.callback_buttons import regestration_button, edite_profile_button
from loader import dp, users_db


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message, state: FSMContext):
    await pg_db.create()

    full_name = message.from_user.full_name
    user = await pg_db.select_profile(full_name=full_name)

    if user is not None:

        await message.answer(f"–ü—Ä–∏–≤–µ—Ç üëã {full_name}! –ù–∞ —Å–≤—è–∑–∏ @AndrushaTestbot. –Ø —Å–º–æ—Ç—Ä—é —Ç—ã —Ç—É—Ç —É–∂–µ –Ω–µ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑. "
                             f"–ß—Ç–æ –∂–µ–ª–∞–µ—à—å?", reply_markup=InlineKeyboardMarkup(
            row_width=1,
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                        callback_data=edite_profile_callback.new(status="edite_profile"),
                        url=requests.post('http://127.0.0.1:8000/filling_profile/',
                                          params={'full_name': message.from_user.full_name
                                                  }).url

                    )
                ]
            ]
        ))
    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç üëã {full_name}! –ù–∞ —Å–≤—è–∑–∏ @AndrushaTestbot, —è —Å–º–æ—Ç—Ä—é —Ç—ã –∑–¥–µ—Å—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑. –ù–∞–º "
                             f"–Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏  —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éÔ∏è ", reply_markup=regestration_button)

    # if user is not None:
    #
    #     a = requests.post('http://127.0.0.1:8000/filling_profile/', params={'tg_prof': 'telega',
    #                                                                         'full_name': message.from_user.full_name,
    #                                                                         'email': '—Å–µ—Ä–µ–∂–∞@mail.ru',
    #                                                                         'skills': '–∫–∞–∫–∞—Ç—å, –Ω–µ –º—ã—Ç—å—Å—è',
    #                                                                         'for_search': '—Ö–æ—á–µ—Ç—Å—è –æ–±—â–∞—Ç—å—Å—è'
    #                                                                         })
    #     b = a.url
    #     await message.answer(
    #         f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í –±–∞–∑–µ —Ç–∞–∫–∏—Ö –∫–∞–∫ —Ç—ã {count_users}: {all_us}. –ê –µ—â–µ —Ç—ã –ª–æ—Å–æ—Å—å. —Å—Å—ã–ª–∫–∞ {b}")
    #
    # else:
    #
    #     await message.answer(text="–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ñ–º–∏  –Ω–∞ –ö–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
    #                          reply_markup=regestration_or_profile_button)
